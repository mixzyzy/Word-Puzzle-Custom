<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Word Search Puzzle</title>
  <style>
    /* ── Reset & Base Typography ── */
    body{margin:0;font-family:Arial,Helvetica,sans-serif;background:#f9f9f9}
    h1,h2,h3{margin:0}

    /* ── Fluid title sizes for very small screens ── */
    .title-small{font-size:clamp(18px,3vw,28px);font-weight:600;color:#555}
    .title-main {font-size:clamp(32px,6vw,56px);font-weight:800;color:#333;line-height:1.1}
    .title-tag  {font-size:clamp(14px,2.5vw,22px);font-weight:500;color:#777;margin-top:6px}
    #titleWrap  {text-align:center}

    /* ── 1. INTRO SCREEN: full-viewport, centered ── */
    #intro-screen{
      display:flex;                    /* flex container */
      justify-content:center;          /* vertical centering  */
      align-items:center;              /* horizontal centering */
      height:100vh;                    /* exactly one viewport */
      padding:0 20px;                  /* side padding only   */
      overflow:hidden;                 /* no scroll bar ever  */
    }
    /* wrapper that stacks title + buttons with gap */
    #intro-content{
      display:flex;
      flex-direction:column;
      align-items:center;
      gap:28px;
    }

    /* ── 2. CUSTOM SCREEN: still top-aligned and scrollable ── */
    #custom-screen{
      display:flex;
      flex-direction:column;
      align-items:center;
      justify-content:flex-start;
      gap:28px;
      padding:40px 20px 0;             /* top gap for header */
      min-height:100vh;                /* tall enough for large screens */
      overflow:auto;                   /* allow scroll to page-10 input */
      text-align:center;
    }

    /* ---- Buttons & Inputs ---- */
    .start-button{
      padding:18px 38px;font-size:20px;font-weight:600;border:none;border-radius:8px;
      cursor:pointer;box-shadow:0 4px 8px rgba(0,0,0,.15);transition:transform .15s ease
    }
    .start-button:hover{transform:translateY(-2px)}
    #btn-box{display:flex;gap:50px}
    #wordInputs{display:flex;flex-direction:column;gap:12px;max-width:480px;width:100%}
    .page-input label{display:block;font-weight:600;margin-bottom:4px}
    .page-input input{
      width:100%;padding:10px 12px;font-size:16px;border:1px solid #bbb;border-radius:6px
    }

    /* ---- Home Button ---- */
    #homeBtn{
      position:fixed;top:20px;left:20px;display:none;padding:12px 22px;font-size:16px;
      font-weight:600;border:none;border-radius:6px;background:#95a5a6;color:#fff;
      box-shadow:0 4px 8px rgba(0,0,0,.15);cursor:pointer;z-index:2000;
      transition:transform .15s ease
    }
    #homeBtn:hover{transform:translateY(-2px)}

    /* ---- Game Layout ---- */
    #main-container{
      display:none;justify-content:center;align-items:center;gap:60px;padding-top:20px
    }
    #controls{display:flex;flex-direction:column;align-items:center;gap:12px}
    .team-button {
  padding: 15px 25px;
  font-size: 18px;
  font-weight: 700;
  cursor: pointer;
  border: none;
  border-radius: 8px;
  width: 140px;
  color: #fff;
  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.4);
  box-shadow: 0 6px 0 rgba(0, 0, 0, 0.3), 0 8px 15px rgba(0, 0, 0, 0.2); /* Strong shadow */
  transition: all 0.15s ease-in-out;
    }

.team-button:active {
  box-shadow: 0 2px 0 rgba(0, 0, 0, 0.3);
  transform: translateY(4px);
    }

.team-button.team-a {
  background: linear-gradient(to bottom, #ff5e57, #c0392b); /* More depth */
    }

.team-button.team-b {
  background: linear-gradient(to bottom, #5dade2, #21618c); /* More depth */
    }

    .score{font-size:20px;color:#333}
    .timer{font-size:26px;font-weight:bold;color:#222}
    #grid {
  display: grid;
  grid-template-columns: repeat(10, 50px);
  column-gap: 6px;
  row-gap: 8px;
  justify-content: center;
    }

    .cell {
  width: 50px;
  height: 50px;
  margin: 0; /* Important! No extra margin */
  background: #fff;
  border: 1px solid #ccc;
  font-size: 24px;
  font-weight: bold;
  color: #333;
  border-radius: 10px;
  box-shadow: 
    0 6px 0 rgba(0, 0, 0, 0.2),   /* solid drop shadow */
    0 8px 15px rgba(0, 0, 0, 0.3); /* softer spread shadow */
  display: flex;
  align-items: center;
  justify-content: center;
  transition: transform 0.15s ease, box-shadow 0.15s ease;
  
    }

    .cell:hover {
  transform: scale(1.1);
  box-shadow: 0 4px 8px rgba(0,0,0,0.2);
  z-index: 1;
    }
    .found{background:rgba(135,206,235,.6)}
    .hint {background:rgba(255,255,0,.45)}
    .team-a{background:rgba(231,76,60,.35)!important}
    .team-b{background:rgba(52,152,219,.35)!important}
    #wordBox{display:flex;justify-content:center;gap:32px;margin-top:24px;align-items:flex-start}
    #wordList{max-width:360px;text-align:left}
    #wordList h3{margin:0 0 8px 0;font-size:22px}
    #wordList ol{column-count:3;column-gap:40px;margin:0;padding-left:24px}
    #wordList li{font-size:18px;line-height:1.5}
    #hintButton{
      align-self:flex-start;padding:12px 22px;font-size:16px;cursor:pointer;background:#eee;
      border:1px solid #aaa;border-radius:5px;height:fit-content
    }
    #pagination{margin:30px auto;text-align:center}
    #pagination button{padding:8px 15px;margin:0 10px;font-size:14px}
    #reloadButton{
      margin-top:15px;padding:10px 20px;font-size:16px;cursor:pointer;display:none
    }
  </style>
</head>

<body>
<button id="homeBtn">Home</button>

<!-- ░░ INTRO SCREEN ░░ -->
<div id="intro-screen">
  <div id="intro-content">   <!-- new wrapper for centering -->
    <div id="titleWrap">
      <div class="title-small">welcome to the</div>
      <div class="title-main">Word Search Puzzle</div>
      <div class="title-tag">english is easy!</div>
    </div>

    <div id="btn-box">
      <button id="quickBtn"  class="start-button" style="background:#2ecc71;color:#fff">Quick&nbsp;Start</button>
      <button id="customBtn" class="start-button" style="background:#f1c40f;color:#333">Custom</button>
    </div>
  </div>
</div>

<!-- ░░ CUSTOM SCREEN ░░ -->
<div id="custom-screen" style="display:none;">
  <h2>Set your words (max 10 per page, comma-separated)</h2>
  <div id="wordInputs"></div>
  <button id="startCustomBtn" class="start-button" style="background:#2ecc71;color:#fff">START</button>
</div>

<!-- ░░ GAME SCREEN ░░ -->
<div id="main-container">
  <div id="controls">
    <div class="timer" id="timerA">Time: 60</div>
    <button class="team-button team-a" onclick="selectTeam('A')">Team A</button>
    <div class="score">Score: <span id="scoreA">0</span></div>
  </div>

  <div>
    <div id="grid"></div>
    <div id="wordBox">
      <div id="wordList"></div>
      <button id="hintButton">Hint</button>
    </div>

    <div id="pagination">
      <button onclick="prevPage()">Previous</button>
      <span id="pageLabel">Page 1</span>
      <button onclick="nextPage()">Next</button><br>
      <button id="reloadButton" onclick="reloadGame()">Reload Game</button>
    </div>
  </div>

  <div id="controls">
    <div class="timer" id="timerB">Time: 60</div>
    <button class="team-button team-b" onclick="selectTeam('B')">Team B</button>
    <div class="score">Score: <span id="scoreB">0</span></div>
  </div>
</div>

<script>
/* ------------- Default Word Sets (10 pages) ------------- */
const defaultWordSets = [
  ['cat','dog','fish','apple','banana','rice','milk','pig','cake','duck'],
  ['tiger','zebra','panda','monkey','lion','bear','wolf','horse','camel','rhino'],
  ['pizza','burger','sushi','pasta','noodle','steak','fries','salad','bread','cheese'],
  ['red','blue','green','yellow','purple','orange','white','black','pink','brown'],
  ['grape','pen','cloud','car','juice','dog','chair','bag','milk','cat'],
  ['apple','sun','ball','book','rice','bird','ice','fan','egg','toy'],
  ['goat','frog','owl','cow','hen','ant','bee','bat','rat','fox'],
  ['bread','rice','corn','soup','milk','water','juice','tea','cake','honey'],
  ['apple','grape','pear','peach','plum','melon','lemon','kiwi','berry','fig'],
  ['book','ball','pen','desk','chair','lamp','door','sock','shoe','bag']
];
let pageData = defaultWordSets.map(words => ({ words }));

/* ------------- Game Constants & State ------------- */
const gridSize = 10;
const timers   = { A:60, B:60 };
const intervals= { A:null, B:null };
const directions = [
  {dx:1, dy:0, delta:1},
  {dx:0, dy:1, delta:gridSize},
  {dx:1, dy:1, delta:gridSize+1},
  {dx:1, dy:-1,delta:-gridSize+1}
];
const allowed = directions.map(d => d.delta);
const NO_MASK=['camel','rhino','chair','fries','fig'];
const OPTIONAL_MISSING=[...NO_MASK];

let page = 0, currentTeam=null, scoreA=0, scoreB=0;
let currentSelection=[], currentWord='', lastIndex=-1, direction=null;
let foundWords=new Set(), tempGrid;
const gridDiv=document.getElementById('grid');

/* ------------- Screen Navigation ------------- */
const homeBtn=document.getElementById('homeBtn');
homeBtn.onclick=goHome;
function showHomeBtn(flag){homeBtn.style.display=flag?'block':'none';}
function goHome(){
  document.getElementById('intro-screen').style.display='flex';
  document.getElementById('custom-screen').style.display='none';
  document.getElementById('main-container').style.display='none';
  showHomeBtn(false);
  currentTeam=null; ['A','B'].forEach(resetTimer);
}

/* Intro / Custom Flow */
document.getElementById('quickBtn').onclick  = quickStart;
document.getElementById('customBtn').onclick = showCustom;
document.getElementById('startCustomBtn').onclick = startCustom;

function quickStart(){
  pageData = defaultWordSets.map(words => ({ words:[...words] }));
  document.getElementById('intro-screen').style.display='none';
  document.getElementById('main-container').style.display='flex';
  showHomeBtn(true); reloadGame();
}
function showCustom(){
  document.getElementById('intro-screen').style.display='none';
  buildCustomForm();
  document.getElementById('custom-screen').style.display='flex';
  showHomeBtn(true);
}
function buildCustomForm(){
  const wrap=document.getElementById('wordInputs'); wrap.innerHTML='';
  defaultWordSets.forEach((arr,idx)=>{
    wrap.insertAdjacentHTML('beforeend',`
      <div class="page-input">
        <label>Words for page ${idx+1}:</label>
        <input type="text" placeholder="${arr.join(',')}" data-page="${idx}">
      </div>`);});
}
function startCustom(){
  const lists=[];
  document.querySelectorAll('#wordInputs input').forEach(inp=>{
    const txt=inp.value.trim();
    lists.push(txt?txt.split(',').map(s=>s.trim().toLowerCase()).filter(Boolean).slice(0,10)
                  :defaultWordSets[inp.dataset.page]);
  });
  pageData=lists.map(words=>({words}));
  document.getElementById('custom-screen').style.display='none';
  document.getElementById('main-container').style.display='flex';
  reloadGame();
}

/* ------------- Timer Functions ------------- */
function updateTimerDisplay(t){
  document.getElementById(`timer${t}`).textContent =
    `Time: ${String(timers[t]).padStart(2,'0')}`;
}
function resetTimer(t){ clearInterval(intervals[t]); timers[t]=60; updateTimerDisplay(t);}
function startTimer(t){
  resetTimer(t);
  intervals[t]=setInterval(()=>{
    timers[t]--; updateTimerDisplay(t);
    if(timers[t]<=0){clearInterval(intervals[t]); flashColor('#ffdddd');
      penalize(); resetSelection(); const ex=currentTeam; currentTeam=null; resetTimer(ex);}
  },1000);
}

/* ------------- Grid Generation ------------- */
const randomLetter=()=>String.fromCharCode(65+Math.floor(Math.random()*26));
function canPlace(word,r,c,dir){
  const len=word.length,endR=r+dir.dy*(len-1),endC=c+dir.dx*(len-1);
  if(endR<0||endR>=gridSize||endC<0||endC>=gridSize)return false;
  for(let i=0;i<len;i++){
    const idx=(r+dir.dy*i)*gridSize+(c+dir.dx*i);
    if(tempGrid[idx]&&tempGrid[idx]!==word[i])return false;}
  return true;
}
function placeWord(word){
  for(let t=0;t<300;t++){
    const dir=directions[Math.floor(Math.random()*directions.length)];
    const r=Math.floor(Math.random()*gridSize),c=Math.floor(Math.random()*gridSize);
    if(!canPlace(word,r,c,dir))continue;
    for(let i=0;i<word.length;i++){
      const idx=(r+dir.dy*i)*gridSize+(c+dir.dx*i); tempGrid[idx]=word[i];}
    return true;
  } return false;
}
function generateGrid(words){
  tempGrid=new Array(gridSize*gridSize).fill(null);
  words.forEach(w=>placeWord(w.toUpperCase()));
  return tempGrid.map(ch=>ch||randomLetter());
}

/* ------------- Helper UI ------------- */
function maskedDisplay(w){
  if(NO_MASK.includes(w)||w.length<2)return w;
  const pos=Math.floor(Math.random()*w.length);
  return w.slice(0,pos)+'_'+w.slice(pos+1);
}
function flashColor(col){
  const orig=document.body.style.backgroundColor;
  document.body.style.backgroundColor=col;
  setTimeout(()=>document.body.style.backgroundColor=orig,300);}
function updateScores(){
  document.getElementById('scoreA').textContent=scoreA.toFixed(1);
  document.getElementById('scoreB').textContent=scoreB.toFixed(1);}

/* ------------- Team / Selection ------------- */
function selectTeam(t){currentTeam=t; resetSelection(); startTimer(t);}
function resetSelection(){
  currentSelection.forEach(c=>c.classList.remove('team-a','team-b'));
  currentSelection=[]; currentWord=''; lastIndex=-1; direction=null;}
function penalize(){ if(currentTeam==='A'){scoreA-=0.5;resetTimer('A');}
  else if(currentTeam==='B'){scoreB-=0.5;resetTimer('B');} updateScores();}

/* ------------- Word-search Helpers ------------- */
function wordExists(word,cells){
  const target=word.toUpperCase();
  for(let i=0;i<cells.length;i++){
    for(const d of allowed){
      let ok=true;
      for(let j=0;j<target.length;j++){
        const idx=i+j*d;
        if(idx<0||idx>=cells.length){ok=false;break;}
        if(d===1&&Math.floor(idx/gridSize)!==Math.floor(i/gridSize)){ok=false;break;}
        const ch=cells[idx].textContent||cells[idx]; if(ch!==target[j]){ok=false;break;}
      } if(ok)return true;
    }
  } return false;
}
function highlightWord(word,cells){
  const target=word.toUpperCase();
  for(let i=0;i<cells.length;i++){
    for(const d of allowed){
      const pos=[],built=[];
      for(let j=0;j<target.length;j++){
        const idx=i+j*d;
        if(idx<0||idx>=cells.length)break;
        if(d===1&&Math.floor(idx/gridSize)!==Math.floor(i/gridSize))break;
        const cell=cells[idx]; built.push(cell.textContent); pos.push(cell);}
      if(built.join('')===target){pos.forEach(c=>c.classList.add('found'));return;}
    }
  }
}
function showHint(){
  const data=pageData[page]; const cells=[...gridDiv.children];
  const cand=data.words.filter(w=>!foundWords.has(w)&&wordExists(w,cells));
  if(!cand.length)return alert('No more hints');
  const word=cand[Math.floor(Math.random()*cand.length)].toUpperCase();
  for(let i=0;i<cells.length;i++){
    for(const d of allowed){
      const pos=[],built=[];
      for(let j=0;j<word.length;j++){
        const idx=i+j*d;
        if(idx<0||idx>=cells.length)break;
        if(d===1&&Math.floor(idx/gridSize)!==Math.floor(i/gridSize))break;
        const cell=cells[idx]; built.push(cell.textContent); pos.push(cell);}
      if(built.join('')===word){
        pos.forEach(c=>c.classList.add('hint'));
        setTimeout(()=>pos.forEach(c=>c.classList.remove('hint')),1000);return;}
    }
  }
}

/* ------------- Page Handling ------------- */
function loadPage(){
  const data=pageData[page];
  if(!data.grid)data.grid=generateGrid(data.words);
  if(!data.foundWords)data.foundWords=new Set();
  foundWords=data.foundWords;

  OPTIONAL_MISSING.forEach(w=>{
    if(data.words.includes(w)&&!wordExists(w,[...data.grid])&&!foundWords.has(w))
      foundWords.add(w);});

  gridDiv.innerHTML='';
  data.grid.forEach(l=>{
    const cell=document.createElement('div');
    cell.className='cell'; cell.textContent=l; gridDiv.appendChild(cell);});

  document.getElementById('pageLabel').textContent=`Page ${page+1}`;
  document.getElementById('wordList').innerHTML='<h3>Find These Words:</h3><ol>'+
    data.words.map(w=>foundWords.has(w)
        ?`<li data-word=\"${w}\"><del>${maskedDisplay(w)}</del></li>`
        :`<li data-word=\"${w}\">${maskedDisplay(w)}</li>`
    ).join('')+'</ol>';

  const cells=[...gridDiv.children];
  cells.forEach(c=>c.addEventListener('click',e=>handleClick(e,cells,data.words)));
  foundWords.forEach(w=>highlightWord(w,cells));

  updateScores();
  document.getElementById('reloadButton').style.display =
    page===pageData.length-1?'inline-block':'none';

  resetSelection(); currentTeam=null; resetTimer('A'); resetTimer('B');
}

/* Cell Click Handler */
function handleClick(e,cells,words){
  if(!currentTeam)return alert('Select Team first');
  const cell=e.target, idx=cells.indexOf(cell);
  if(!cell.textContent.match(/[A-Z]/))return;

  if(lastIndex===-1){
    currentSelection.push(cell); currentWord+=cell.textContent.toLowerCase();
    cell.classList.add(currentTeam==='A'?'team-a':'team-b'); lastIndex=idx; return;}
  const diff=idx-lastIndex;
  if(direction===null&&allowed.includes(diff))direction=diff;
  if(idx!==lastIndex+direction){flashColor('#ffdddd');penalize();resetSelection();
    currentTeam=null;return;}
  currentSelection.push(cell); currentWord+=cell.textContent.toLowerCase();
  cell.classList.add(currentTeam==='A'?'team-a':'team-b'); lastIndex=idx;
  if(!words.some(w=>w.startsWith(currentWord))){flashColor('#ffdddd'); penalize();
    resetSelection(); currentTeam=null; return;}
  if(words.includes(currentWord)&&!foundWords.has(currentWord)){
    flashColor('#ddffdd');
    currentSelection.forEach(c=>c.classList.remove('team-a','team-b'));
    currentSelection.forEach(c=>c.classList.add('found'));
    foundWords.add(currentWord);
    [...document.querySelectorAll('#wordList li')].forEach(li=>{
      if(li.dataset.word===currentWord)li.innerHTML=`<del>${li.textContent}</del>`;});
    if(currentTeam==='A'){scoreA+=1;resetTimer('A');}
    else                 {scoreB+=1;resetTimer('B');}
    updateScores(); resetSelection(); currentTeam=null;}
}

/* Navigation & Reset */
function nextPage(){page=(page+1)%pageData.length;loadPage();}
function prevPage(){page=(page-1+pageData.length)%pageData.length;loadPage();}
function reloadGame(){
  scoreA=0; scoreB=0; pageData.forEach(p=>p.foundWords=new Set()); page=0; loadPage();}

/* INIT */
document.getElementById('hintButton').onclick=showHint;
loadPage(); /* game preps – visible only after Quick Start/Custom */
</script>
</body>
</html>
